const defaultPrefix = "/twirp";
const livekitPackage = "livekit";
class TwirpRpc {
  constructor(host, pkg, prefix) {
    if (host.startsWith("ws")) {
      host = host.replace("ws", "http");
    }
    this.host = host;
    this.pkg = pkg;
    this.prefix = prefix || defaultPrefix;
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async request(service, method, data, headers) {
    const path = `${this.prefix}/${this.pkg}.${service}/${method}`;
    const url = new URL(path, this.host);
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json;charset=UTF-8",
        ...headers
      },
      body: JSON.stringify(data)
    });
    if (!response.ok) {
      throw new Error(`Request failed with status ${response.status}: ${response.statusText}`);
    }
    const parsedResp = await response.json();
    const camelcaseKeys = await import("camelcase-keys").then((mod) => mod.default);
    return camelcaseKeys(parsedResp, { deep: true });
  }
}
export {
  TwirpRpc,
  livekitPackage
};
//# sourceMappingURL=TwirpRPC.js.map
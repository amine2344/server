"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SipClient_exports = {};
__export(SipClient_exports, {
  SipClient: () => SipClient
});
module.exports = __toCommonJS(SipClient_exports);
var import_protobuf = require("@bufbuild/protobuf");
var import_protocol = require("@livekit/protocol");
var import_ServiceBase = require("./ServiceBase.cjs");
var import_TwirpRPC = require("./TwirpRPC.cjs");
const svc = "SIP";
class SipClient extends import_ServiceBase.ServiceBase {
  /**
   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'
   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY
   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET
   */
  constructor(host, apiKey, secret) {
    super(apiKey, secret);
    this.rpc = new import_TwirpRPC.TwirpRpc(host, import_TwirpRPC.livekitPackage);
  }
  /**
   * @param number - phone number of the trunk
   * @param opts - CreateSipTrunkOptions
   * @deprecated use `createSipInboundTrunk` or `createSipOutboundTrunk`
   */
  async createSipTrunk(number, opts) {
    let inboundAddresses;
    let inboundNumbers;
    let inboundUsername = "";
    let inboundPassword = "";
    let outboundAddress = "";
    let outboundUsername = "";
    let outboundPassword = "";
    let name = "";
    let metadata = "";
    if (opts !== void 0) {
      inboundAddresses = opts.inbound_addresses;
      inboundNumbers = opts.inbound_numbers;
      inboundUsername = opts.inbound_username || "";
      inboundPassword = opts.inbound_password || "";
      outboundAddress = opts.outbound_address || "";
      outboundUsername = opts.outbound_username || "";
      outboundPassword = opts.outbound_password || "";
      name = opts.name || "";
      metadata = opts.metadata || "";
    }
    const req = new import_protocol.CreateSIPTrunkRequest({
      name,
      metadata,
      inboundAddresses,
      inboundNumbers,
      inboundUsername,
      inboundPassword,
      outboundNumber: number,
      outboundAddress,
      outboundUsername,
      outboundPassword
    }).toJson();
    const data = await this.rpc.request(
      svc,
      "CreateSIPTrunk",
      req,
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPTrunkInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @param name - human-readable name of the trunk
   * @param numbers - phone numbers of the trunk
   * @param opts - CreateSipTrunkOptions
   */
  async createSipInboundTrunk(name, numbers, opts) {
    let allowedAddresses;
    let allowedNumbers;
    let authUsername = "";
    let authPassword = "";
    let metadata = "";
    let headers = {};
    let headersToAttributes = {};
    if (opts !== void 0) {
      allowedAddresses = opts.allowed_addresses;
      allowedNumbers = opts.allowed_numbers;
      authUsername = opts.auth_username || "";
      authPassword = opts.auth_password || "";
      metadata = opts.metadata || "";
      headers = opts.headers || {};
      headersToAttributes = opts.headersToAttributes || {};
    }
    const req = new import_protocol.CreateSIPInboundTrunkRequest({
      trunk: new import_protocol.SIPInboundTrunkInfo({
        name,
        numbers,
        metadata,
        allowedAddresses,
        allowedNumbers,
        authUsername,
        authPassword,
        headers,
        headersToAttributes
      })
    }).toJson();
    const data = await this.rpc.request(
      svc,
      "CreateSIPInboundTrunk",
      req,
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPInboundTrunkInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @param name - human-readable name of the trunk
   * @param address - hostname and port of the SIP server to dial
   * @param numbers - phone numbers of the trunk
   * @param opts - CreateSipTrunkOptions
   */
  async createSipOutboundTrunk(name, address, numbers, opts) {
    let authUsername = "";
    let authPassword = "";
    let transport = import_protocol.SIPTransport.SIP_TRANSPORT_AUTO;
    let metadata = "";
    let headers = {};
    let headersToAttributes = {};
    if (opts !== void 0) {
      authUsername = opts.auth_username || "";
      authPassword = opts.auth_password || "";
      transport = opts.transport || import_protocol.SIPTransport.SIP_TRANSPORT_AUTO;
      metadata = opts.metadata || "";
      headers = opts.headers || {};
      headersToAttributes = opts.headersToAttributes || {};
    }
    const req = new import_protocol.CreateSIPOutboundTrunkRequest({
      trunk: new import_protocol.SIPOutboundTrunkInfo({
        name,
        address,
        numbers,
        metadata,
        transport,
        authUsername,
        authPassword,
        headers,
        headersToAttributes
      })
    }).toJson();
    const data = await this.rpc.request(
      svc,
      "CreateSIPOutboundTrunk",
      req,
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPOutboundTrunkInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @deprecated use `listSipInboundTrunk` or `listSipOutboundTrunk`
   */
  async listSipTrunk() {
    const req = {};
    const data = await this.rpc.request(
      svc,
      "ListSIPTrunk",
      new import_protocol.ListSIPTrunkRequest(req).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.ListSIPTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];
  }
  async listSipInboundTrunk() {
    const req = {};
    const data = await this.rpc.request(
      svc,
      "ListSIPInboundTrunk",
      new import_protocol.ListSIPInboundTrunkRequest(req).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.ListSIPInboundTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];
  }
  async listSipOutboundTrunk() {
    const req = {};
    const data = await this.rpc.request(
      svc,
      "ListSIPOutboundTrunk",
      new import_protocol.ListSIPOutboundTrunkRequest(req).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.ListSIPOutboundTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];
  }
  /**
   * @param sipTrunkId - sip trunk to delete
   */
  async deleteSipTrunk(sipTrunkId) {
    const data = await this.rpc.request(
      svc,
      "DeleteSIPTrunk",
      new import_protocol.DeleteSIPTrunkRequest({ sipTrunkId }).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPTrunkInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @param rule - sip dispatch rule
   * @param opts - CreateSipDispatchRuleOptions
   */
  async createSipDispatchRule(rule, opts) {
    let trunkIds;
    let hidePhoneNumber = false;
    let name = "";
    let metadata = "";
    let ruleProto = void 0;
    if (opts !== void 0) {
      trunkIds = opts.trunkIds;
      hidePhoneNumber = opts.hidePhoneNumber || false;
      name = opts.name || "";
      metadata = opts.metadata || "";
    }
    if (rule.type == "direct") {
      ruleProto = new import_protocol.SIPDispatchRule({
        rule: {
          case: "dispatchRuleDirect",
          value: new import_protocol.SIPDispatchRuleDirect({
            roomName: rule.roomName,
            pin: rule.pin || ""
          })
        }
      });
    } else if (rule.type == "individual") {
      ruleProto = new import_protocol.SIPDispatchRule({
        rule: {
          case: "dispatchRuleIndividual",
          value: new import_protocol.SIPDispatchRuleIndividual({
            roomPrefix: rule.roomPrefix,
            pin: rule.pin || ""
          })
        }
      });
    }
    const req = new import_protocol.CreateSIPDispatchRuleRequest({
      rule: ruleProto,
      trunkIds,
      hidePhoneNumber,
      name,
      metadata
    }).toJson();
    const data = await this.rpc.request(
      svc,
      "CreateSIPDispatchRule",
      req,
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPDispatchRuleInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  async listSipDispatchRule() {
    const req = {};
    const data = await this.rpc.request(
      svc,
      "ListSIPDispatchRule",
      new import_protocol.ListSIPDispatchRuleRequest(req).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.ListSIPDispatchRuleResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];
  }
  /**
   * @param sipDispatchRuleId - sip trunk to delete
   */
  async deleteSipDispatchRule(sipDispatchRuleId) {
    const data = await this.rpc.request(
      svc,
      "DeleteSIPDispatchRule",
      new import_protocol.DeleteSIPDispatchRuleRequest({ sipDispatchRuleId }).toJson(),
      await this.authHeader({}, { admin: true })
    );
    return import_protocol.SIPDispatchRuleInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @param sipTrunkId - sip trunk to use for the call
   * @param number - number to dial
   * @param roomName - room to attach the call to
   * @param opts - CreateSipParticipantOptions
   */
  async createSipParticipant(sipTrunkId, number, roomName, opts) {
    let participantIdentity = "";
    let participantName = "";
    let participantMetadata = "";
    let dtmf = "";
    let playRingtone = false;
    let playDialtone = false;
    let hidePhoneNumber = false;
    let ringingTimeout = void 0;
    let maxCallDuration = void 0;
    let enableKrisp = void 0;
    if (opts !== void 0) {
      participantIdentity = opts.participantIdentity || "";
      participantName = opts.participantName || "";
      participantMetadata = opts.participantMetadata || "";
      dtmf = opts.dtmf || "";
      playRingtone = opts.playRingtone || false;
      playDialtone = opts.playDialtone || playRingtone;
      hidePhoneNumber = opts.hidePhoneNumber || false;
      ringingTimeout = opts.ringingTimeout || void 0;
      maxCallDuration = opts.maxCallDuration || void 0;
      enableKrisp = opts.enableKrisp || void 0;
    }
    const req = new import_protocol.CreateSIPParticipantRequest({
      sipTrunkId,
      sipCallTo: number,
      roomName,
      participantIdentity,
      participantName,
      participantMetadata,
      dtmf,
      playRingtone: playDialtone,
      playDialtone,
      hidePhoneNumber,
      ringingTimeout: ringingTimeout ? new import_protobuf.Duration({ seconds: BigInt(ringingTimeout) }) : void 0,
      maxCallDuration: maxCallDuration ? new import_protobuf.Duration({ seconds: BigInt(maxCallDuration) }) : void 0,
      enableKrisp
    }).toJson();
    const data = await this.rpc.request(
      svc,
      "CreateSIPParticipant",
      req,
      await this.authHeader({}, { call: true })
    );
    return import_protocol.SIPParticipantInfo.fromJson(data, { ignoreUnknownFields: true });
  }
  /**
   * @param roomName - room the SIP participant to transfer is connectd to
   * @param participantIdentity - identity of the SIP participant to transfer
   * @param transferTo - SIP URL to transfer the participant to
   */
  async transferSipParticipant(roomName, participantIdentity, transferTo, opts) {
    let playDialtone = false;
    if (opts !== void 0) {
      playDialtone = opts.playDialtone || false;
    }
    const req = new import_protocol.TransferSIPParticipantRequest({
      participantIdentity,
      roomName,
      transferTo,
      playDialtone
    }).toJson();
    await this.rpc.request(
      svc,
      "TransferSIPParticipant",
      req,
      await this.authHeader({ roomAdmin: true, room: roomName }, { call: true })
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SipClient
});
//# sourceMappingURL=SipClient.cjs.map
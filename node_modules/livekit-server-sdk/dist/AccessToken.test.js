import {
  RoomAgentDispatch,
  RoomCompositeEgressRequest,
  RoomConfiguration,
  RoomEgress
} from "@livekit/protocol";
import * as jose from "jose";
import { describe, expect, it } from "vitest";
import { AccessToken, TokenVerifier } from "./AccessToken";
const testApiKey = "abcdefg";
const testSecret = "abababa";
describe("encoded tokens are valid", () => {
  const t = new AccessToken(testApiKey, testSecret, {
    identity: "me",
    name: "myname"
  });
  t.addGrant({ room: "myroom" });
  const EncodedTestSecret = new TextEncoder().encode(testSecret);
  it("can be decoded", async () => {
    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {
      issuer: testApiKey
    });
    expect(payload).not.toBe(void 0);
  });
  it("has name set", async () => {
    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {
      issuer: testApiKey
    });
    expect(payload.name).toBe("myname");
  });
  it("has video grants set", async () => {
    var _a;
    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {
      issuer: testApiKey
    });
    expect(payload.video).toBeTruthy();
    expect((_a = payload.video) == null ? void 0 : _a.room).toEqual("myroom");
  });
});
describe("identity is required for only join grants", () => {
  it("allows empty identity for create", async () => {
    const t = new AccessToken(testApiKey, testSecret);
    t.addGrant({ roomCreate: true });
    expect(await t.toJwt()).toBeTruthy();
  });
  it("throws error when identity is not provided for join", async () => {
    const t = new AccessToken(testApiKey, testSecret);
    t.addGrant({ roomJoin: true });
    await expect(async () => {
      await t.toJwt();
    }).rejects.toThrow();
  });
});
describe("verify token is valid", () => {
  it("can decode encoded token", async () => {
    var _a;
    const t = new AccessToken(testApiKey, testSecret);
    t.sha256 = "abcdefg";
    t.kind = "agent";
    t.addGrant({ roomCreate: true });
    t.attributes = { foo: "bar", live: "kit" };
    const v = new TokenVerifier(testApiKey, testSecret);
    const decoded = await v.verify(await t.toJwt());
    expect(decoded).not.toBe(void 0);
    expect(decoded.sha256).toEqual("abcdefg");
    expect((_a = decoded.video) == null ? void 0 : _a.roomCreate).toBeTruthy();
    expect(decoded.kind).toEqual("agent");
    expect(decoded.attributes).toEqual(t.attributes);
  });
});
describe("adding grants should not overwrite existing grants", () => {
  const EncodedTestSecret = new TextEncoder().encode(testSecret);
  it("should not overwrite existing grants", async () => {
    var _a, _b;
    const t = new AccessToken(testApiKey, testSecret, {
      identity: "me",
      name: "myname"
    });
    t.addGrant({ roomCreate: true });
    t.addGrant({ roomJoin: true });
    const { payload } = await jose.jwtVerify(
      await t.toJwt(),
      EncodedTestSecret,
      { issuer: testApiKey }
    );
    expect((_a = payload.video) == null ? void 0 : _a.roomCreate).toBeTruthy();
    expect((_b = payload.video) == null ? void 0 : _b.roomJoin).toBeTruthy();
  });
});
describe("room configuration with agents and egress", () => {
  it("should set agents and egress in room configuration", async () => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    const t = new AccessToken(testApiKey, testSecret, {
      identity: "test-identity"
    });
    const roomConfig = new RoomConfiguration({
      name: "test-room",
      maxParticipants: 10
    });
    const agents = [
      new RoomAgentDispatch({
        agentName: "agent1",
        metadata: "metadata-1"
      }),
      new RoomAgentDispatch({
        agentName: "agent2",
        metadata: "metadata-2"
      })
    ];
    const egress = new RoomEgress({
      room: new RoomCompositeEgressRequest({ roomName: "test-room" })
    });
    roomConfig.agents = agents;
    roomConfig.egress = egress;
    t.roomConfig = roomConfig;
    const v = new TokenVerifier(testApiKey, testSecret);
    const decoded = await v.verify(await t.toJwt());
    expect(decoded.roomConfig).toBeDefined();
    expect((_a = decoded.roomConfig) == null ? void 0 : _a.name).toEqual("test-room");
    expect((_b = decoded.roomConfig) == null ? void 0 : _b.maxParticipants).toEqual(10);
    expect((_c = decoded.roomConfig) == null ? void 0 : _c.agents).toHaveLength(2);
    expect((_e = (_d = decoded.roomConfig) == null ? void 0 : _d.agents) == null ? void 0 : _e[0].agentName).toEqual("agent1");
    expect((_g = (_f = decoded.roomConfig) == null ? void 0 : _f.agents) == null ? void 0 : _g[0].metadata).toEqual("metadata-1");
    expect((_i = (_h = decoded.roomConfig) == null ? void 0 : _h.agents) == null ? void 0 : _i[1].agentName).toEqual("agent2");
    expect((_k = (_j = decoded.roomConfig) == null ? void 0 : _j.agents) == null ? void 0 : _k[1].metadata).toEqual("metadata-2");
    expect((_n = (_m = (_l = decoded.roomConfig) == null ? void 0 : _l.egress) == null ? void 0 : _m.room) == null ? void 0 : _n.roomName).toEqual("test-room");
  });
});
//# sourceMappingURL=AccessToken.test.js.map
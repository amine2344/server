{"version":3,"sources":["../src/AccessToken.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  RoomAgentDispatch,\n  RoomCompositeEgressRequest,\n  RoomConfiguration,\n  RoomEgress,\n} from '@livekit/protocol';\nimport * as jose from 'jose';\nimport { describe, expect, it } from 'vitest';\nimport { AccessToken, TokenVerifier } from './AccessToken';\nimport type { ClaimGrants } from './grants';\n\nconst testApiKey = 'abcdefg';\nconst testSecret = 'abababa';\n\ndescribe('encoded tokens are valid', () => {\n  const t = new AccessToken(testApiKey, testSecret, {\n    identity: 'me',\n    name: 'myname',\n  });\n  t.addGrant({ room: 'myroom' });\n  const EncodedTestSecret = new TextEncoder().encode(testSecret);\n  it('can be decoded', async () => {\n    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {\n      issuer: testApiKey,\n    });\n\n    expect(payload).not.toBe(undefined);\n  });\n\n  it('has name set', async () => {\n    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {\n      issuer: testApiKey,\n    });\n\n    expect(payload.name).toBe('myname');\n  });\n\n  it('has video grants set', async () => {\n    const { payload } = await jose.jwtVerify(await t.toJwt(), EncodedTestSecret, {\n      issuer: testApiKey,\n    });\n\n    expect(payload.video).toBeTruthy();\n    expect((payload as ClaimGrants).video?.room).toEqual('myroom');\n  });\n});\n\ndescribe('identity is required for only join grants', () => {\n  it('allows empty identity for create', async () => {\n    const t = new AccessToken(testApiKey, testSecret);\n    t.addGrant({ roomCreate: true });\n\n    expect(await t.toJwt()).toBeTruthy();\n  });\n  it('throws error when identity is not provided for join', async () => {\n    const t = new AccessToken(testApiKey, testSecret);\n    t.addGrant({ roomJoin: true });\n\n    await expect(async () => {\n      await t.toJwt();\n    }).rejects.toThrow();\n  });\n});\n\ndescribe('verify token is valid', () => {\n  it('can decode encoded token', async () => {\n    const t = new AccessToken(testApiKey, testSecret);\n    t.sha256 = 'abcdefg';\n    t.kind = 'agent';\n    t.addGrant({ roomCreate: true });\n    t.attributes = { foo: 'bar', live: 'kit' };\n\n    const v = new TokenVerifier(testApiKey, testSecret);\n    const decoded = await v.verify(await t.toJwt());\n\n    expect(decoded).not.toBe(undefined);\n    expect(decoded.sha256).toEqual('abcdefg');\n    expect(decoded.video?.roomCreate).toBeTruthy();\n    expect(decoded.kind).toEqual('agent');\n    expect(decoded.attributes).toEqual(t.attributes);\n  });\n});\n\ndescribe('adding grants should not overwrite existing grants', () => {\n  const EncodedTestSecret = new TextEncoder().encode(testSecret);\n\n  it('should not overwrite existing grants', async () => {\n    const t = new AccessToken(testApiKey, testSecret, {\n      identity: 'me',\n      name: 'myname',\n    });\n    t.addGrant({ roomCreate: true });\n    t.addGrant({ roomJoin: true });\n\n    const { payload }: jose.JWTVerifyResult<ClaimGrants> = await jose.jwtVerify(\n      await t.toJwt(),\n      EncodedTestSecret,\n      { issuer: testApiKey },\n    );\n    expect(payload.video?.roomCreate).toBeTruthy();\n    expect(payload.video?.roomJoin).toBeTruthy();\n  });\n});\n\ndescribe('room configuration with agents and egress', () => {\n  it('should set agents and egress in room configuration', async () => {\n    const t = new AccessToken(testApiKey, testSecret, {\n      identity: 'test-identity',\n    });\n\n    const roomConfig = new RoomConfiguration({\n      name: 'test-room',\n      maxParticipants: 10,\n    });\n\n    const agents: RoomAgentDispatch[] = [\n      new RoomAgentDispatch({\n        agentName: 'agent1',\n        metadata: 'metadata-1',\n      }),\n      new RoomAgentDispatch({\n        agentName: 'agent2',\n        metadata: 'metadata-2',\n      }),\n    ];\n\n    const egress = new RoomEgress({\n      room: new RoomCompositeEgressRequest({ roomName: 'test-room' }),\n    });\n\n    roomConfig.agents = agents;\n    roomConfig.egress = egress;\n\n    t.roomConfig = roomConfig;\n\n    const v = new TokenVerifier(testApiKey, testSecret);\n    const decoded = await v.verify(await t.toJwt());\n\n    expect(decoded.roomConfig).toBeDefined();\n    expect(decoded.roomConfig?.name).toEqual('test-room');\n    expect(decoded.roomConfig?.maxParticipants).toEqual(10);\n    expect(decoded.roomConfig?.agents).toHaveLength(2);\n    expect(decoded.roomConfig?.agents?.[0].agentName).toEqual('agent1');\n    expect(decoded.roomConfig?.agents?.[0].metadata).toEqual('metadata-1');\n    expect(decoded.roomConfig?.agents?.[1].agentName).toEqual('agent2');\n    expect(decoded.roomConfig?.agents?.[1].metadata).toEqual('metadata-2');\n    expect(decoded.roomConfig?.egress?.room?.roomName).toEqual('test-room');\n  });\n});\n"],"mappings":"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","names":[]}